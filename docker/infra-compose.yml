version: '3'
services:
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=loopers
      - MYSQL_CHARACTER_SET=utf8mb4
      - MYSQL_COLLATE=utf8mb4_general_ci
    volumes:
      - mysql-8-data:/var/lib/mysql

  pg-simulator:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=paymentgateway
      - MYSQL_CHARACTER_SET=utf8mb4
      - MYSQL_COLLATE=utf8mb4_general_ci
    volumes:
      - pg-simulator-data:/var/lib/mysql


  redis-master:
    image: redis:7.0
    container_name: redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    command:
      [
        "redis-server", # redis 서버 실행 명령어
        "--appendonly", "yes", # AOF (AppendOnlyFile) 영속성 기능 켜기
        "--save", "",
        "--latency-monitor-threshold", "100", # 특정 command 가 지정 시간(ms) 이상 걸리면 monitor 기록
      ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "PING" ]
      interval: 5s
      timeout: 2s
      retries: 10

  redis-readonly:
    image: redis:7.0
    container_name: redis-readonly
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - "6380:6379"
    volumes:
      - redis_readonly_data:/data
    command:
      [
        "redis-server",
        "--appendonly", "yes",
        "--appendfsync", "everysec",
        "--replicaof", "redis-master", "6379", # replica 모드로 실행 + 서비스 명, 서비스 포트
        "--replica-read-only", "yes", # 읽기 전용으로 설정
        "--latency-monitor-threshold", "100",
      ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "PING" ]
      interval: 5s
      timeout: 2s
      retries: 10

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "9092:9092" # 카프카 브로커 PORT
      - "19092:19092" # 호스트 리스너 얘 떄문인가
    environment:
      - KAFKA_CFG_NODE_ID=1 # 브로커 고유 ID
      - KAFKA_CFG_PROCESS_ROLES=broker,controller # KRaft 모드여서, broker / controller 역할 모두 부여
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:19092,CONTROLLER://:9093 # 브로커 클라이언트 (PLAINTEXT), 브로커 호스트 (PLAINTEXT) 내부 컨트롤러 (CONTROLLER)
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092 # 외부 클라이언트 접속 호스트 (localhost:9092), 브로커 접속 호스트 (localhost:19092)
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT # 각 리스너별 보안 프로토콜 설정
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER # 컨트롤러 담당 리스너 지정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 # 컨트롤러 후보 노드 정의 (단일 브로커라 자기 자신만 있음)
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1 # consumer offset 복제 갯수 (현재는 1 - 로컬용이라서)
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1 # transaction log 토픽 복제 갯수 (현재는 1 - 로컬용이라서)
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1 # In-Sync-Replica 최소 수 (현재는 1 - 로컬용이라서)
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local  # kafka-ui 에서 보이는 클러스터명
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092 # kafka-ui 가 연결할 브로커 주소

volumes:
  mysql-8-data:
  pg-simulator-data:
  redis_master_data:
  redis_readonly_data:
  kafka-data:

networks:
  default:
    driver: bridge